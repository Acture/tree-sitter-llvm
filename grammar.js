module.exports = grammar({
  name: "llvm",

  rules: {
    module: ($) =>
      repeat(
        choice(
            $.type,
            $.statement,
            $.number,
            $.comment,
            $.string,
            $.label,
            $.keyword,
            $.boolean,
            $.float,
            $.constant,
            $.identifier,
            $.punctuation,
        )
      ),

    type: ($) => choice(
      "void",
      "half",
      "bfloat",
      "float",
      "double",
      "x86_fp80",
      "fp128",
      "pcc_fp128",
      "label",
      "metadata",
      "x86_mmx",
      "x86_amx",
      /i\d+/
    ),

    statement: ($) => choice(
      "add",
      "addrspacecast",
      "alloca",
      "and",
      "arcp",
      "ashr",
      "atomicrmw",
      "bitcast",
      "br",
      "catchpad",
      "catchswitch",
      "catchret",
      "call",
      "callbr",
      "cleanuppad",
      "cleanupret",
      "cmpxchg",
      "eq",
      "exact",
      "extractelement",
      "extractvalue",
      "fadd",
      "fast",
      "fcmp",
      "fdiv",
      "fence",
      "fmul",
      "fneg",
      "fpext",
      "fptosi",
      "fptoui",
      "fptrunc",
      "free",
      "freeze",
      "frem",
      "fsub",
      "getelementptr",
      "icmp",
      "inbounds",
      "indirectbr",
      "insertelement",
      "insertvalue",
      "inttoptr",
      "invoke",
      "landingpad",
      "load",
      "lshr",
      "malloc",
      "max",
      "min",
      "mul",
      "nand",
      "ne",
      "ninf",
      "nnan",
      "nsw",
      "nsz",
      "nuw",
      "oeq",
      "oge",
      "ogt",
      "ole",
      "olt",
      "one",
      "or",
      "ord",
      "phi",
      "ptrtoint",
      "resume",
      "ret",
      "sdiv",
      "select",
      "sext",
      "sge",
      "sgt",
      "shl",
      "shufflevector",
      "sitofp",
      "sle",
      "slt",
      "srem",
      "store",
      "sub",
      "switch",
      "trunc",
      "udiv",
      "ueq",
      "uge",
      "ugt",
      "uitofp",
      "ule",
      "ult",
      "umax",
      "umin",
      "une",
      "uno",
      "unreachable",
      "unwind",
      "urem",
      "va_arg",
      "xchg",
      "xor",
      "zext",
    ),

    keyword: $ => choice(
      "acq_rel",
      "acquire",
      "addrspace",
      "alias",
      "align",
      "alignstack",
      "allocsize",
      "alwaysinline",
      "appending",
      "argmemonly",
      "arm_aapcs_vfpcc",
      "arm_aapcscc",
      "arm_apcscc",
      "asm",
      "atomic",
      "available_externally",
      "blockaddress",
      "builtin",
      "byref",
      "byval",
      "c",
      "caller",
      "catch",
      "cc",
      "ccc",
      "cleanup",
      "cold",
      "coldcc",
      "comdat",
      "common",
      "constant",
      "convergent",
      "datalayout",
      "declare",
      "default",
      "define",
      "deplibs",
      "dereferenceable",
      "dereferenceable_or_null",
      "distinct",
      "dllexport",
      "dllimport",
      "dso_local",
      "dso_preemptable",
      "except",
      "extern_weak",
      "external",
      "externally_initialized",
      "fastcc",
      "filter",
      "from",
      "gc",
      "global",
      "hhvm_ccc",
      "hhvmcc",
      "hidden",
      "hot",
      "immarg",
      "inaccessiblemem_or_argmemonly",
      "inaccessiblememonly",
      "inalloca",
      "initialexec",
      "inlinehint",
      "inreg",
      "intel_ocl_bicc",
      "inteldialect",
      "internal",
      "jumptable",
      "linkonce",
      "linkonce_odr",
      "local_unnamed_addr",
      "localdynamic",
      "localexec",
      "minsize",
      "module",
      "monotonic",
      "msp430_intrcc",
      "mustprogress",
      "musttail",
      "naked",
      "nest",
      "noalias",
      "nobuiltin",
      "nocallback",
      "nocapture",
      "nocf_check",
      "noduplicate",
      "nofree",
      "noimplicitfloat",
      "noinline",
      "nomerge",
      "nonlazybind",
      "nonnull",
      "noprofile",
      "norecurse",
      "noredzone",
      "noreturn",
      "nosync",
      "noundef",
      "nounwind",
      "nosanitize_coverage",
      "null_pointer_is_valid",
      "optforfuzzing",
      "optnone",
      "optsize",
      "personality",
      "preallocated",
      "private",
      "protected",
      "ptx_device",
      "ptx_kernel",
      "readnone",
      "readonly",
      "release",
      "returned",
      "returns_twice",
      "safestack",
      "sanitize_address",
      "sanitize_hwaddress",
      "sanitize_memory",
      "sanitize_memtag",
      "sanitize_thread",
      "section",
      "seq_cst",
      "shadowcallstack",
      "sideeffect",
      "signext",
      "source_filename",
      "speculatable",
      "speculative_load_hardening",
      "spir_func",
      "spir_kernel",
      "sret",
      "ssp",
      "sspreq",
      "sspstrong",
      "strictfp",
      "swiftcc",
      "swifterror",
      "swifttailcc",
      "swiftself",
      "syncscope",
      "tail",
      "tailcc",
      "target",
      "thread_local",
      "to",
      "triple",
      "unnamed_addr",
      "unordered",
      "uselistorder",
      "uselistorder_bb",
      "uwtable",
      "volatile",
      "weak",
      "weak_odr",
      "willreturn",
      "win64cc",
      "within",
      "writeonly",
      "x",
      "x86_64_sysvcc",
      "x86_fastcallcc",
      "x86_stdcallcc",
      "x86_thiscallcc",
      "zeroext",
    ),

    number: ($) => /-?\d+/,

    float: ($) => choice(/-?\d+\.\d*(e[+-]\d+)\?/, /0x[0-9a-fA-F]+/),

    boolean: ($) => choice("true", "false"),

    constant: ($) =>
      choice(
        "zeroinitializer",
        "undef",
        "null",
        "none",
        "poison",
        "vscale"
      ),
    
    comment: ($) => /;.*/,

    string: ($) => /[!c]?"(\\\\|\\"|.)*"/,

    label: ($) => /[-a-zA-Z$._][-a-zA-Z$._0-9]*:/,

    identifier: ($) => choice(
        /[%@!]\d+/,
        /[%@!][-a-zA-Z$._][-a-zA-Z$._0-9]*/,
        /DW_TAG_[a-z_]+/,
        /DW_ATE_[a-zA-Z_]+/,
        /DW_OP_[a-zA-Z0-9_]+/,
        /DW_LANG_[a-zA-Z0-9_]+/,
        /DW_VIRTUALITY_[a-z_]+/,
        /DIFlag[A-Za-z]+/,
    ),

    punctuation: ($) =>
      choice("(", ")", "[", "]", "{", "}", ",", "!", "=", "*")
  },
});
